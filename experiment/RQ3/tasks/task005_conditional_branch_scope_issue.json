{
  "task_description": "Based on the provided background information as well as the content in the cnlp, Find undefined variables in Instruction that are used across scopes",
  "instance": [
    {
      "id": 1,
      "agent_name": "daily_news_helper",
      "global_variable": "    \"_user_account1\": {\n        \"type\": \"UserInfo\",\n        \"is_global\": True,\n        \"value\": {\n            \"id\": 10000001,\n            \"password\": \"abc123.\",\n            \"language\": \"en\",\n            \"position\": {\n                \"longitude_and_latitude\": \"42.6511674, -73.754968\",\n                \"region\": \"US\"\n            },\n            \"key_and_host\": {\n                \"key\": \"af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\",\n                \"news_host\": \"google-news13.p.rapidapi.com\",\n                \"game_host\": \"epic-store-games.p.rapidapi.com\",\n                \"weather_host\": \"weatherapi-com.p.rapidapi.com\",\n                \"movie_host\": \"moviedatabase8.p.rapidapi.com\",\n                \"finance_host\": \"real-time-finance-data.p.rapidapi.com\",\n                \"sport_host\": \"sportapi7.p.rapidapi.com\"\n            }\n        },\n        \"source\": \"data/vars/implementation.py\"\n    },",
      "api_info":"{    \"get_movie_data\": {\n        \"description\": \"Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'.\",\n        \"paras\": {\n            \"user\": \"UserInfo\"\n        },\n        \"return\": \"dict\",\n        \"source\": \"data/apis/implementation.py\"\n    },\n    \"get_weather_data\": {\n        \"description\": \"Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service.\",\n        \"paras\": {\n            \"user\": \"UserInfo\"\n        },\n        \"return\": \"dict\",\n        \"source\": \"data/apis/implementation.py\"\n    },\n    \"get_google_news\": {\n        \"description\": \"Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers.\",\n        \"paras\": {\n            \"user\": \"UserInfo\",\n        },\n        \"return\": \"dict\",\n        \"source\": \"data/apis/implementation2.py\"\n    },\n    \"get_game_data\": {\n        \"description\": \"Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings.\",\n        \"paras\": {\n            \"user\": \"UserInfo\",\n            \"search_words\": \"str\"\n        },\n        \"return\": \"dict\",\n        \"source\": \"data/apis/implementation2.py\",\n    },\n    \"get_finance_data\": {\n        \"description\": \"Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys.\",\n        \"paras\": {\n            \"user\": \"UserInfo\"\n        },\n        \"return\": \"dict\",\n        \"source\": \"data/apis/implementation2.py\"\n    },\n    \"get_sport_data\": {\n        \"description\": \"Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers.\",\n        \"paras\": {\n            \"user\": \"UserInfo\"\n        },\n        \"return\": \"dict\",\n        \"source\": \"data/apis/implementation.py\",\n    },\n    \"transform_json_news\": {\n        \"description\": \"Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response.\",\n        \"paras\": {\n            \"json_data\": \"dict\"\n        },\n        \"return\": \"str\",\n        \"source\": \"data/apis/implementation.py\"\n    },}",
      "schema": "class RapidAPIHeaders(TypedDict):\n    key: str\n    movie_host: str\n    game_host: str\n    weather_host: str\n    sport_host: str\n    finance_host: str\n    news_host: str\n\n\nclass PositionInfo(TypedDict):\n    longitude_and_latitude: str\n    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']\n\nclass UserInfo(TypedDict):\n    id: int\n    language: str\n    password: str\n    position: PositionInfo\n    key_and_host: RapidAPIHeaders",
      "cnlp": "[DEFINE_AGENT: DailyNewsHelper]\n        [DEFINE_PERSONA:]\n            ROLE: You are a news assistant looking up various current events\n            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.\n        [END_PERSONA]\n\n        [DEFINE_CONSTRAINTS:]\n            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy\n        [END_CONSTRAINTS]\n\n        [DEFINE_TYPES:]\n            RequestType = [\"game\", \"finance\", \"sports\", \"movie\", \"weather\", \"Google News\"]\n            JsonInfo = { } \n        [END_TYPES]\n\n        [DEFINE_VARIABLES:]\n            _user_account1: UserInfo\n            _request_type: RequestType\n            _search_words: str\n            json_info: JsonInfo\n            _json_info: JsonInfo\n            _report_info: str\n        [END_VARIABLES]\n\n        [DEFINE_WORKER: \"Workflow to handle user requests and display news information\" NewsWorkflow]\n            [INPUTS]\n                <REF>_user_account1</REF>\n            [END_INPUTS]\n\n            [OUTPUTS]\n                <REF>_report_info</REF>\n            [END_OUTPUTS]\n\n            [MAIN_FLOW]\n                [SEQUENTIAL_BLOCK]\n                    COMMAND-1 [INPUT \"What type of information do you need? (game, finance, sports, movie, weather, Google News)\" VALUE _request_type: RequestType SET]\n                [END_SEQUENTIAL_BLOCK]\n\n                [IF <REF>_request_type</REF> = \"Google News\"]\n                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]\n                [ELSEIF <REF>_request_type</REF> = \"game\"]\n                    COMMAND-3 [INPUT \"Please enter the keywords you want to search for.\" VALUE _search_words: str SET]\n                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]\n                [ELSEIF <REF>_request_type</REF> = \"movie\"]\n                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]\n                [ELSEIF <REF>_request_type</REF> = \"finance\"]\n                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE _json_info: JsonInfo SET]\n                [ELSEIF <REF>_request_type</REF> = \"sports\"]\n                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]\n                [ELSEIF <REF>_request_type</REF> = \"weather\"]\n                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]\n                [END_IF]\n\n                [SEQUENTIAL_BLOCK]\n                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]\n                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]\n                [END_SEQUENTIAL_BLOCK]\n            [END_MAIN_FLOW]\n        [END_WORKER]\n    [END_AGENT]",
      "reference_version": [
        {
          "error_path": "instruction.main_flow.sequential_block2.command10",
          "error_reason": "The parameter 'json_data' with argument 'json_info' is problematic: The variable 'json_info' is referenced without being conditionally declared in every branch of the IF_BLOCK."
        }
      ]
    },
    {
      "id": 2,
      "agent_name": "travel_assistant",
      "global_variable": "{\"global_variable\": \"    \\\"_user_account1\\\": {\\n        \\\"type\\\": \\\"UserInfo\\\",\\n        \\\"is_global\\\": True,\\n        \\\"value\\\": {\\n            \\\"id\\\": 10000001,\\n            \\\"password\\\": \\\"abc123.\\\",\\n            \\\"language\\\": \\\"en\\\",\\n            \\\"position\\\": {\\n                \\\"longitude_and_latitude\\\": \\\"42.6511674, -73.754968\\\",\\n                \\\"region\\\": \\\"US\\\"\\n            },\\n            \\\"key_and_host\\\": {\\n                \\\"key\\\": \\\"af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\\\",\\n                \\\"news_host\\\": \\\"google-news13.p.rapidapi.com\\\",\\n                \\\"game_host\\\": \\\"epic-store-games.p.rapidapi.com\\\",\\n                \\\"weather_host\\\": \\\"weatherapi-com.p.rapidapi.com\\\",\\n                \\\"movie_host\\\": \\\"moviedatabase8.p.rapidapi.com\\\",\\n                \\\"finance_host\\\": \\\"real-time-finance-data.p.rapidapi.com\\\",\\n                \\\"sport_host\\\": \\\"sportapi7.p.rapidapi.com\\\"\\n            }\\n        },\\n        \\\"source\\\": \\\"data/vars/implementation.py\\\"\\n    },\"}",
      "api_info": "{\n    \"get_weather_data\": {\n        \"description\": \"Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service.\",\n        \"paras\": {\n            \"user\": \"UserInfo\"\n        },\n        \"return\": \"dict\",\n        \"source\": \"data/apis/implementation.py\"\n    },\n    \"extract_weather_condition\": {\n        \"description\": \"Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type.\",\n        \"paras\": {\n            \"weather_data\": \"dict\"\n        },\n        \"return\": \"WeatherCondition\",\n        \"source\": \"data/apis/implementation.py\"\n    },\n    \"log_transport_suggestion\": {\n        \"description\": \"Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode.\",\n        \"paras\": {\n            \"user\": \"UserInfo\",\n            \"mode\": \"TransportMode\"\n        },\n        \"source\": \"data/apis/implementation.py\"\n    }\n}\n",
      "schema": "class RapidAPIHeaders(TypedDict):\n    key: str\n    movie_host: str\n    game_host: str\n    weather_host: str\n    sport_host: str\n    finance_host: str\n    news_host: str\n\n\nclass PositionInfo(TypedDict):\n    longitude_and_latitude: str\n    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']\n\nclass UserInfo(TypedDict):\n    id: int\n    language: str\n    password: str\n    position: PositionInfo\n    key_and_host: RapidAPIHeaders\n",
      "cnlp": "[DEFINE_AGENT: TravelAssistant]\n    [DEFINE_PERSONA:]\n        ROLE: You are a travel assistant helping users plan their commute.\n        FUNCTION: Provide transportation suggestions based on weather and user preferences.\n    [END_PERSONA]\n\n    [DEFINE_CONSTRAINTS:]\n        FORBID: Please do not generate illegal content\n    [END_CONSTRAINTS]\n\n    [DEFINE_TYPES:]\n        WeatherCondition = [\"Sunny\", \"Rainy\", \"Snowy\",\"Cloudy\", \"Windy\"]\n        TransportMode = [\"Walking\", \"PublicTransport\", \"Driving\", \"StayHome\"]\n    [END_TYPES]\n\n    [DEFINE_VARIABLES:]\n        _user_account1: UserInfo  // Global variable\n        _weather_info: dict\n        _current_weather: WeatherCondition\n        _transport_mode: TransportMode\n        _non_transport_mode: TransportMode\n    [END_VARIABLES]\n\n    [DEFINE_WORKER: \"Workflow to suggest transportation mode\" TravelWorkflow]\n        [INPUTS]\n            <REF>_user_account1</REF>\n        [END_INPUTS]\n\n        [OUTPUTS]\n            <REF>_transport_mode</REF>\n        [END_OUTPUTS]\n\n        [MAIN_FLOW]\n            [SEQUENTIAL_BLOCK]\n                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]\n                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]\n            [END_SEQUENTIAL_BLOCK]\n\n            [IF <REF>_current_weather</REF> = \"Sunny\"]\n                COMMAND-3 [COMMAND Set the value of _transport_mode to \"Walking\" RESULT _transport_mode: TransportMode SET]\n            [ELSEIF <REF>_current_weather</REF> = \"Rainy\"]\n                COMMAND-4 [COMMAND Set the value of _transport_mode to \"PublicTransport\" RESULT _transport_mode: TransportMode SET]\n            [ELSEIF <REF>_current_weather</REF> = \"Snowy\"]\n                COMMAND-5 [COMMAND Set the value of _transport_mode to \"StayHome\" RESULT _non_transport_mode: TransportMode SET]\n            [ELSE]\n                COMMAND-6 [COMMAND Set the value of _transport_mode to \"Driving\" RESULT _transport_mode: TransportMode SET]\n            [END_IF]\n\n            [SEQUENTIAL_BLOCK]\n                COMMAND-7 [DISPLAY \"Based on the current weather, we suggest: \" <REF>_transport_mode</REF>]\n                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]\n            [END_SEQUENTIAL_BLOCK]\n        [END_MAIN_FLOW]\n    [END_WORKER]\n[END_AGENT]",
      "reference_version": [
        {
          "error_path": "instruction.main_flow.sequential_block2.command8",
          "error_reason": "The variable _transport_mode may not have been assigned in all branches of the IF block. Specifically, in the ELSE branch, _transport_mode is not set, leading to potential usage of an uninitialized variable."
        }
      ]
    },
    {
      "id": 3,
      "agent_name": "fitness_health_advisor",
      "global_variable": "{    \"_user_account_fitness\": {\n        \"type\": \"FitnessUserInfo\",\n        \"is_global\": True,\n        \"value\": {\n            \"id\": 10000004,\n            \"password\": \"Fitness123.\",\n            \"language\": \"en\",\n            \"position\": {\n                \"longitude_and_latitude\": \"34.052235, -118.243683\",\n                \"region\": \"US\"\n            },\n            \"key_and_host\": {\n                \"key\": \"4a1e23dd4a2b340b87123ef1234ab123\",\n                \"fitness_host\": \"fitness-api.p.rapidapi.com\",\n                \"diet_host\": \"diet-api.p.rapidapi.com\"\n            }\n        },\n        \"source\": \"data/vars/fitness_implementation.py\"\n    }}",
      "api_info": " {   \"get_workout_plan\": {\n        \"description\": \"Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences.\",\n        \"paras\": {\n            \"user\": \"FitnessUserInfo\",\n            \"type\": \"WorkoutType\"\n        },\n        \"return\": \"WorkoutPlan\",\n        \"source\": \"data/apis/fitness_implementation.py\"\n    },\n    \"get_diet_plan\": {\n        \"description\": \"Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences.\",\n        \"paras\": {\n            \"user\": \"FitnessUserInfo\",\n            \"preference\": \"str\"\n        },\n        \"return\": \"DietPlan\",\n        \"source\": \"data/apis/fitness_implementation.py\"\n    }}",
      "schema": "class FitnessAPIHeaders(TypedDict):\n    key: str\n    fitness_host: str\n    diet_host: str\n\n\nclass FitnessPositionInfo(TypedDict):\n    longitude_and_latitude: str\n    region: Literal['US', 'CA', 'AU', 'UK', 'IN']\n\n\nclass FitnessUserInfo(TypedDict):\n    id: int\n    language: str\n    password: str\n    position: FitnessPositionInfo\n    key_and_host: FitnessAPIHeaders\n\n\nclass DietPlan(TypedDict):\n    meals: List[str]\n    total_calories: int\n\n\nWorkoutType = Literal[\"strength\", \"cardio\", \"flexibility\", \"balance\"]\n\n\nclass WorkoutPlan(TypedDict):\n    exercises: List[str]\n    duration_in_minutes: int\n    intensity: str",
      "cnlp": "[DEFINE_AGENT: FitnessHealthAdvisor]\n    [DEFINE_PERSONA:]\n        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.\n    [END_PERSONA]\n\n    [DEFINE_CONSTRAINTS:]\n        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.\n    [END_CONSTRAINTS]\n\n    [DEFINE_TYPES:]\n        WorkoutType = [\"strength\", \"cardio\", \"flexibility\", \"balance\"]\n        DietPlan = { meals: List[str], total_calories: int }\n        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }\n        FeedbackResponse = [\"great\", \"average\", \"poor\"]\n    [END_TYPES]\n\n    [DEFINE_VARIABLES:]\n        _user_account_fitness: FitnessUserInfo\n        _chosen_workout_type: WorkoutType\n        _diet_preference: str\n        workout_plan: WorkoutPlan\n        diet_plan: DietPlan\n        feedback: FeedbackResponse\n        _recommendation_info\n        _recommendation: str\n    [END_VARIABLES]\n\n    [DEFINE_WORKER: \"Workout and Diet Planning\" FitnessRoutineWorkflow]\n        [INPUTS]\n            <REF>_user_account_fitness</REF>\n        [END_INPUTS]\n\n        [OUTPUTS]\n            <REF>_recommendation</REF>\n        [END_OUTPUTS]\n\n        [MAIN_FLOW]\n            [SEQUENTIAL_BLOCK]\n                COMMAND-1 [INPUT \"What type of workout would you like to focus on? (strength, cardio, flexibility, balance)\" VALUE _chosen_workout_type: WorkoutType SET]\n                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]\n                COMMAND-3 [INPUT \"Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)\" VALUE _diet_preference: str SET]\n                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]\n            [END_SEQUENTIAL_BLOCK]\n\n            [IF <REF>_chosen_workout_type</REF> = \"strength\"]\n                COMMAND-5 [DISPLAY \"Your strength training workout plan includes: <REF>workout_plan</REF>\"]\n            [ELSEIF <REF>_chosen_workout_type</REF> = \"cardio\"]\n                COMMAND-6 [DISPLAY \"Your cardio workout plan includes: <REF>workout_plan</REF>\"]\n            [ELSEIF <REF>_chosen_workout_type</REF> = \"flexibility\"]\n                COMMAND-7 [DISPLAY \"Your flexibility training workout plan includes: <REF>workout_plan</REF>\"]\n            [ELSEIF <REF>_chosen_workout_type</REF> = \"balance\"]\n                COMMAND-8 [DISPLAY \"Your balance training workout plan includes: <REF>workout_plan</REF>\"]\n            [END_IF]\n\n            [SEQUENTIAL_BLOCK]\n                COMMAND-9 [DISPLAY \"Your diet plan is: <REF>diet_plan</REF>\"]\n                COMMAND-10 [INPUT \"How would you rate today's fitness plan? (great, average, poor)\" VALUE feedback: FeedbackResponse SET]\n            [END_SEQUENTIAL_BLOCK]\n\n            [IF <REF>feedback</REF> = \"great\"]\n                COMMAND-11 [COMMAND Set the value of _recommendation to \"You did an excellent job today! Keep it up!\" RESULT _recommendation: str SET]\n            [ELSEIF <REF>feedback</REF> = \"average\"]\n                COMMAND-12 [COMMAND Set the value of _recommendation to \"You did well, but there's room for improvement!\" RESULT _recommendation: str SET]\n            [ELSEIF <REF>feedback</REF> = \"poor\"]\n                COMMAND-13 [COMMAND Set the value of _recommendation to \"Don't be discouraged. Tomorrow is another chance!\" RESULT _recommendation_info: str SET]\n            [END_IF]\n\n            [SEQUENTIAL_BLOCK]\n                COMMAND-14 [DISPLAY \"Today's feedback: <REF>_recommendation</REF>\"]\n            [END_SEQUENTIAL_BLOCK]\n        [END_MAIN_FLOW]\n    [END_WORKER]\n[END_AGENT]\n",
      "reference_version": [
        {
          "error_path": "instruction.main_flow.sequential_block3.command14",
          "error_reason": "The variable '_recommendation' may not have been assigned in the ELSE branch, leading to potential use of an uninitialized variable."
        }
      ]
    }
  ]
}