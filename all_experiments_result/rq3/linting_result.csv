task_filename,instance_id,agent_name,global_variable,api_info,type_info,reference_version,cnlp_code,linting_errors,Correct Location Identified (CLI),Correct but Erroneous Explanation (CEE),Explanation with Redundant Misjudgment (ERM)
task001_persona_referenced_global_variable_does_not_exist.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'persona.ROLE.reference1', 'error_reason': 'The variable _task_info referenced in <REF>_task_info</REF> is not declared in the DEFINE_VARIABLES section or globally. This leads to an undefined reference.'}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events, the specific tasks information is subject to <REF> _task_info </REF>.
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'persona.ROLE.reference1': [""This variable '_task_info' is not declared""]}}}",1,1,0
task001_persona_referenced_global_variable_does_not_exist.json,2,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'persona.ROLE.reference1', 'error_reason': 'The variable _task_info referenced in <REF>_task_info</REF> is not declared in the DEFINE_VARIABLES section or globally. This leads to an undefined reference.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute, the specific tasks information is subject to <REF>_task_info</REF>.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'persona.ROLE.reference1': [""This variable '_task_info' is not declared""]}}}",1,1,0
task001_persona_referenced_global_variable_does_not_exist.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'persona.ROLE.reference1', 'error_reason': 'The variable _fitness_goal referenced in <REF>_fitness_goal</REF> is not declared in the DEFINE_VARIABLES section or globally. This leads to an undefined reference.'}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant. Your tasks are based on <REF>_fitness_goal</REF>.
        FUNCTION: Provide workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'persona.ROLE.reference1': [""This variable '_fitness_goal' is not declared""]}}}",1,1,0
task002_constraint_referenced_global_variable_does_not_exist.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'constraints.FORBID.reference1', 'error_reason': ""The variable '_description_of_violations' is not declared in DEFINE_VARIABLES or as a global variable.""}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events.
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy, for details regarding the explanation of prohibited content, please refer to <REF>_description_of_violations</REF>.
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'constraints.FORBID.reference1': [""This variable '_description_of_violations' is not declared""]}}}",1,1,0
task002_constraint_referenced_global_variable_does_not_exist.json,2,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'constraints.FORBID.reference1', 'error_reason': ""The variable '_description_of_violations' is not declared in DEFINE_VARIABLES or as a global variable.""}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content, for details regarding the explanation of prohibited content, please refer to <REF>_description_of_violations</REF>.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'constraints.FORBID.reference1': [""This variable '_description_of_violations' is not declared""]}}}",1,1,0
task002_constraint_referenced_global_variable_does_not_exist.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'constraints.FORBID.reference1', 'error_reason': ""The variable '_fitness_restrictions' is not declared in DEFINE_VARIABLES or as a global variable.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Avoid suggesting exercises that conflict with <REF>_fitness_restrictions</REF>.
    [END_CONSTRAINTS]


    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'constraints.FORBID.reference1': [""This variable '_fitness_restrictions' is not declared""]}}}",1,1,0
task003_undeclared_variable_reference.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command11', 'error_reason': ""The variable 'report_information' referenced in <REF>report_information</REF> is not declared in the DEFINE_VARIABLES section or globally. This leads to an undefined reference.""}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sport, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>report_information</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command11.description_with_reference.reference4': [""This variable 'report_information' is not declared""]}}}",1,1,0
task003_undeclared_variable_reference.json,2,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.if_block1.elif_part1.command4', 'error_reason': ""Parameter 'search_words' with argument 'search_words' has problem: This variable 'search_words' is not declared""}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events.
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy.
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sport"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: str
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sport, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.if_block1.elif_part1.command4': [""Parameter 'search_words' with argument 'search_words' has problem: This variable 'search_words' is not declared""]}}}",1,1,0
task003_undeclared_variable_reference.json,3,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1.description_with_reference.reference2', 'error_reason': 'The variable transport_mode referenced in <REF>transport_mode</REF> is not declared. The correct variable should be <REF>_transport_mode</REF> as declared in DEFINE_VARIABLES.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo 
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [DISPLAY ""Your transportation mode is: "" <REF>transport_mode</REF>]
                COMMAND-2 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-3 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-7 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-8 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-9 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1.description_with_reference.reference3': [""This variable 'transport_mode' is not declared""]}}}",1,1,0
task003_undeclared_variable_reference.json,4,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block2.command8', 'error_reason': 'The variable <REF>transport_mode</REF> referenced in COMMAND-8 is not declared. The correct variable should be <REF>_transport_mode</REF> as declared in DEFINE_VARIABLES.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command8': [""Parameter 'mode' with argument 'transport_mode' has problem: This variable 'transport_mode' is not declared""]}}}",1,1,0
task003_undeclared_variable_reference.json,5,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block3.command15', 'error_reason': ""The variable 'workout_summary' referenced in <REF>workout_summary</REF> is not declared in DEFINE_VARIABLES or as a temporary variable.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
                COMMAND-15 [DISPLAY ""Your workout summary: "" <REF>workout_summary</REF>]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block3.command15.description_with_reference.reference7': [""This variable 'workout_summary' is not declared""]}}}",1,1,0
task003_undeclared_variable_reference.json,6,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command10.description_with_reference.reference2', 'error_reason': 'The reference to the variable _report_info was made before its declaration.'}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: str
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sport, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [DISPLAY <REF>_report_info</REF>]
                    COMMAND-11 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command10.description_with_reference.reference2': ['The reference to the variable _report_info was made before its declaration.']}}}",1,1,0
task003_undeclared_variable_reference.json,7,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1.description_with_reference.reference1', 'error_reason': 'The variable _current_weather is referenced in COMMAND-1 before it has been assigned a value. The assignment happens in COMMAND-2, so using it before that leads to undefined behavior.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [DISPLAY ""Your transportation mode is: "" <REF>transport_mode</REF>]
                COMMAND-2 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-3 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-7 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-8 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-9 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1.description_with_reference.reference3': [""This variable 'transport_mode' is not declared""]}}}",1,1,0
task004_duplicate_variable_declaration.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command11', 'error_reason': ""The variable '_report_info' was previously declared, so this new declaration will be ignored.""}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [COMMAND Filter out violations in <REF>_report_info</REF> RESULT _report_info: str SET]
                    COMMAND-12 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command11': [""The variable '_report_info' has already been declared earlier, so the current declaration will not take effect.""]}}}",1,1,0
task004_duplicate_variable_declaration.json,2,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command2', 'error_reason': 'The variable _current_weather has been declared twice with different types (WeatherCondition and str). This duplication causes a conflict, and the second declaration will not take effect.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _current_weather: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_current_weather</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command2': [""The variable '_current_weather' has already been declared earlier, so the current declaration will not take effect."", ""Response variable '_current_weather' has problem: Variable '_current_weather' is of type 'dict', expected 'WeatherCondition'""]}}}",1,1,0
task004_duplicate_variable_declaration.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block1.command4', 'error_reason': ""The variable '_chosen_workout_type' was previously declared, so the current declaration will have no effect.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE _chosen_workout_type: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>_chosen_workout_type</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command4': [""The variable '_chosen_workout_type' has already been declared earlier, so the current declaration will not take effect."", ""Response variable '_chosen_workout_type' has problem: Variable '_chosen_workout_type' is of type 'WorkoutType', expected 'DietPlan'""]}}}",1,1,0
task005_conditional_branch_scope_issue.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command10', 'error_reason': ""The parameter 'json_data' with argument 'json_info' is problematic: The variable 'json_info' is referenced without being conditionally declared in every branch of the IF_BLOCK.""}]","[DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE _json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command10': [""Parameter 'json_data' with argument 'json_info' has problem: The variable 'json_info' is used without being conditionally declared in all branches of the IF_BLOCK.""]}}}",1,1,0
task005_conditional_branch_scope_issue.json,2,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block2.command8', 'error_reason': 'The variable _transport_mode may not have been assigned in all branches of the IF block. Specifically, in the ELSE branch, _transport_mode is not set, leading to potential usage of an uninitialized variable.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"",""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
        _non_transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _non_transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command7.description_with_reference.reference2': [""The variable '_transport_mode' is used without being conditionally declared in all branches of the IF_BLOCK.""], 'instruction.main_flow.sequential_block2.command8': [""Parameter 'mode' with argument '_transport_mode' has problem: The variable '_transport_mode' is used without being conditionally declared in all branches of the IF_BLOCK.""]}}}",1,1,0
task005_conditional_branch_scope_issue.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block3.command14', 'error_reason': ""The variable '_recommendation' may not have been assigned in the ELSE branch, leading to potential use of an uninitialized variable.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation_info
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation_info: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block3.command14.description_with_reference.reference2': [""The variable '_recommendation' is used without being conditionally declared in all branches of the IF_BLOCK.""]}}}",1,1,0
task006_target_type_cannot_be_found.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.if_block1.elif_part1.command4', 'error_reason': ""The parameter 'search_words' with argument '_search_words' is problematic: The type 'SearchWords' does not exist.""}]","[DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: SearchWords
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: SearchWords SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.if_block1.elif_part1.command4': [""Parameter 'search_words' with argument '_search_words' has problem: Type 'SearchWords' not found.""]}}}",1,1,0
task006_target_type_cannot_be_found.json,2,travel_assistant,"{""global_variable"": ""    \""_user_account1\"": {\n        \""type\"": \""UserInfo\"",\n        \""is_global\"": True,\n        \""value\"": {\n            \""id\"": 10000001,\n            \""password\"": \""abc123.\"",\n            \""language\"": \""en\"",\n            \""position\"": {\n                \""longitude_and_latitude\"": \""42.6511674, -73.754968\"",\n                \""region\"": \""US\""\n            },\n            \""key_and_host\"": {\n                \""key\"": \""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6\"",\n                \""news_host\"": \""google-news13.p.rapidapi.com\"",\n                \""game_host\"": \""epic-store-games.p.rapidapi.com\"",\n                \""weather_host\"": \""weatherapi-com.p.rapidapi.com\"",\n                \""movie_host\"": \""moviedatabase8.p.rapidapi.com\"",\n                \""finance_host\"": \""real-time-finance-data.p.rapidapi.com\"",\n                \""sport_host\"": \""sportapi7.p.rapidapi.com\""\n            }\n        },\n        \""source\"": \""data/vars/implementation.py\""\n    },""}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block2.command8', 'error_reason': 'The type TransportMode used for _transport_mode is not declared in DEFINE_TYPES. This leads to an undefined type error.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        Transport_Mode = [""Walking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command8': [""Parameter 'mode' with argument '_transport_mode' has problem: Type 'TransportMode' not found.""]}}}",1,1,0
task006_target_type_cannot_be_found.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block1.command2', 'error_reason': ""The type 'ExercisePlan' used for the variable 'workout_plan' in COMMAND-2 is not declared in DEFINE_TYPES or globally.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: ExercisePlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command2': [""Response variable 'workout_plan' has problem: Type 'ExercisePlan' not found.""]}}}",1,1,0
task007_api_call_argument_type_mismatch.json,1,daily_news_helper,"{    ""_user_account2"": {
        ""type"": ""UnKnown"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000002,
            ""password"": ""ABC123."",
            ""language"": ""en"",
            ""position"": {
                ""region"": ""JP""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    }}","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': ['instruction.main_flow.if_block1.if_part.command2', 'instruction.main_flow.if_block1.elif_part1.command4', 'instruction.main_flow.if_block1.elif_part2.command5', 'instruction.main_flow.if_block1.elif_part3.command6', 'instruction.main_flow.if_block1.elif_part4.command7', 'instruction.main_flow.if_block1.elif_part5.command8'], 'error_reason': 'Parameter \'user\' with argument \'_user_account2\' has problem: has several possible issues may have occurred:\n(1)In path `position.longitude_and_latitude` has \'missing\' error for value `{""region"": ""JP""}` because: Field required\n(2)In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'UK\', \'US\', \'RU\', \'IN\', \'BR\', \'DE\', \'FR\' or \'CA\'\n'}]","[DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account2: UnKnown
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account2</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account2</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account2</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account2</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account2</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account2</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account2</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.if_block1.if_part.command2': ['Parameter \'user\' with argument \'_user_account2\' has problem: has several possible issues may have occurred:\n(1)In path `position.longitude_and_latitude` has \'missing\' error for value `{""region"": ""JP""}` because: Field required\n(2)In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'UK\', \'US\', \'RU\', \'IN\', \'BR\', \'DE\', \'FR\' or \'CA\'\n'], 'instruction.main_flow.if_block1.elif_part1.command4': ['Parameter \'user\' with argument \'_user_account2\' has problem: has several possible issues may have occurred:\n(1)In path `position.longitude_and_latitude` has \'missing\' error for value `{""region"": ""JP""}` because: Field required\n(2)In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'UK\', \'US\', \'RU\', \'IN\', \'BR\', \'DE\', \'FR\' or \'CA\'\n'], 'instruction.main_flow.if_block1.elif_part2.command5': ['Parameter \'user\' with argument \'_user_account2\' has problem: has several possible issues may have occurred:\n(1)In path `position.longitude_and_latitude` has \'missing\' error for value `{""region"": ""JP""}` because: Field required\n(2)In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'UK\', \'US\', \'RU\', \'IN\', \'BR\', \'DE\', \'FR\' or \'CA\'\n'], 'instruction.main_flow.if_block1.elif_part3.command6': ['Parameter \'user\' with argument \'_user_account2\' has problem: has several possible issues may have occurred:\n(1)In path `position.longitude_and_latitude` has \'missing\' error for value `{""region"": ""JP""}` because: Field required\n(2)In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'UK\', \'US\', \'RU\', \'IN\', \'BR\', \'DE\', \'FR\' or \'CA\'\n'], 'instruction.main_flow.if_block1.elif_part4.command7': ['Parameter \'user\' with argument \'_user_account2\' has problem: has several possible issues may have occurred:\n(1)In path `position.longitude_and_latitude` has \'missing\' error for value `{""region"": ""JP""}` because: Field required\n(2)In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'UK\', \'US\', \'RU\', \'IN\', \'BR\', \'DE\', \'FR\' or \'CA\'\n'], 'instruction.main_flow.if_block1.elif_part5.command8': ['Parameter \'user\' with argument \'_user_account2\' has problem: has several possible issues may have occurred:\n(1)In path `position.longitude_and_latitude` has \'missing\' error for value `{""region"": ""JP""}` because: Field required\n(2)In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'UK\', \'US\', \'RU\', \'IN\', \'BR\', \'DE\', \'FR\' or \'CA\'\n']}}}",1,1,0
task007_api_call_argument_type_mismatch.json,2,travel_assistant,"{    ""_user_account3"": {
        ""type"": ""str"",
        ""is_global"": True,
        ""value"": ""test"",
        ""source"": ""data/vars/implementation.py""
    },}","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1', 'error_reason': 'The parameter user is passed as <REF>_user_account3</REF>, which is of type str. However, the API get_weather_data expects user to be of type UserInfo. This type mismatch leads to an error.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account3: str
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account3</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account3</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account3</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1': ['Parameter \'user\' with argument \'_user_account3\' has problem: In Root has \'dict_type\' error for value `""test""` because: Input should be an object'], 'instruction.main_flow.sequential_block2.command8': ['Parameter \'user\' with argument \'_user_account3\' has problem: In Root has \'dict_type\' error for value `""test""` because: Input should be an object']}}}",1,1,0
task007_api_call_argument_type_mismatch.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block1.command4', 'error_reason': ""The parameter 'preference' is passed as 'workout_plan' from workout_plan, but the API get_diet_plan expects 'WorkoutPlan' to be of type 'str'.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>workout_plan</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command4': [""Parameter 'preference' with argument 'workout_plan' has problem: Variable 'workout_plan' is of type 'WorkoutPlan', expected 'str'""]}}}",1,1,0
task007_api_call_argument_type_mismatch.json,4,fitness_health_advisor,"    ""_user_account_fitness_2"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""JP""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    },"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block1.command2', 'error_reason': 'The user parameter has an invalid position.region value ""JP"". Accepted values are \'US\', \'CA\', \'AU\', \'UK\', or \'IN\'.'}, {'error_path': 'instruction.main_flow.sequential_block1.command4', 'error_reason': 'The user parameter has an invalid position.region value ""JP"". Accepted values are \'US\', \'CA\', \'AU\', \'UK\', or \'IN\'.'}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness_2: UnKnown
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness_2</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness_2</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness_2</REF>, preference: <REF>workout_plan</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command2': ['Parameter \'user\' with argument \'_user_account_fitness_2\' has problem: In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'US\', \'CA\', \'AU\', \'UK\' or \'IN\''], 'instruction.main_flow.sequential_block1.command4': ['Parameter \'user\' with argument \'_user_account_fitness_2\' has problem: In path `position.region` has \'literal_error\' error for value `""JP""` because: Input should be \'US\', \'CA\', \'AU\', \'UK\' or \'IN\'', ""Parameter 'preference' with argument 'workout_plan' has problem: Variable 'workout_plan' is of type 'WorkoutPlan', expected 'str'""]}}}",1,1,0
task008_api_return_type_mismatch.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command10', 'error_reason': ""The response variable '_report_info' is problematic: The variable '_report_info' is of type 'dict', but a 'str' type was expected.""}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: dict SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command10': [""Response variable '_report_info' has problem: Variable '_report_info' is of type 'dict', expected 'str'""]}}}",1,1,0
task008_api_return_type_mismatch.json,2,travel_assistant,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1', 'error_reason': 'The API get_weather_data returns a dict, but the response variable _weather_info is declared as type str. This mismatch in expected return type causes an error.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo
        _weather_info: str
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: str SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1': [""Response variable '_weather_info' has problem: Variable '_weather_info' is of type 'str', expected 'dict'""], 'instruction.main_flow.sequential_block1.command2': [""Parameter 'weather_data' with argument '_weather_info' has problem: Variable '_weather_info' is of type 'str', expected 'dict'""]}}}",1,1,0
task008_api_return_type_mismatch.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block1.command2', 'error_reason': ""The API 'get_workout_plan' returns a 'dict', but the response variable 'workout_plan' is declared as type 'str'.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: str SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command2': [""Response variable 'workout_plan' has problem: Variable 'workout_plan' is of type 'str', expected 'WorkoutPlan'""]}}}",1,1,0
task009_non_existent_api.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.if_block1.if_part.command2', 'error_reason': ""The API 'get_youtube_news' is not recognized or does not exist!""}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_youtube_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.if_block1.if_part.command2': [""The API 'get_youtube_news' does not exist!""]}}}",1,1,0
task009_non_existent_api.json,2,travel_assistant,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1', 'error_reason': 'The API get_travel_info called in COMMAND-1 does not exist in the provided global API_info. This leads to an undefined function call.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_travel_info WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1': [""The API 'get_travel_info' does not exist!""]}}}",1,1,0
task009_non_existent_api.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.if_block.command7', 'error_reason': ""The API 'fetch_fitness_data' called in COMMAND-7 does not exist in the provided global API_info.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [CALL fetch_fitness_data WITH {user: <REF>_user_account_fitness</REF>} RESPONSE fitness_data: dict SET]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.if_block1.elif_part2.command7': [""The API 'fetch_fitness_data' does not exist!""]}}}",1,1,0
task010_extraneous_api_parameters.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command10', 'error_reason': "" The API 'transform_json_news' is called with an unexpected parameter 'topic'. This parameter is not defined in the API's specification, leading to an error due to extraneous parameters.""}]","   [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {topic: <REF>_request_type</REF>, json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command10': ['Unexpected parameters found: topic']}}}",1,1,0
task010_extraneous_api_parameters.json,2,travel_assistant,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },
         ""_date"": {
        ""type"": ""str"",
        ""is_global"": True,
        ""value"": ""2022-09-01"",
        ""source"": ""data/vars/fitness_implementation.py""
    }","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1', 'error_reason': "" The API get_weather_data is called with an unexpected parameter date: '2022-09-01'. This parameter is not defined in the API's specification, leading to an error due to extraneous parameters.""}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo
        _date: str
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
            <REF>_date</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>, date: <REF>_date</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1': ['Unexpected parameters found: date']}}}",1,1,0
task010_extraneous_api_parameters.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block1.command2', 'error_reason': ""The API 'get_workout_plan' is called with an unexpected parameter 'duration', which is not defined in the API's specification.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>, duration: 60} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command2': ['Unexpected parameters found: duration']}}}",1,1,0
task011_missing_api_parameters.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.if_block1.elif_part1.command4', 'error_reason': ""API 'get_game_data' requires parameters 'search_words'.""}]","   [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                    COMMAND-11 [DISPLAY <REF>_report_info</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.if_block1.elif_part1.command4': ['Missing parameters: search_words']}}}",1,1,0
task011_missing_api_parameters.json,2,travel_assistant,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },
         ""_date"": {
        ""type"": ""str"",
        ""is_global"": True,
        ""value"": ""2022-09-01"",
        ""source"": ""data/vars/fitness_implementation.py""
    }","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    },
        ""get_travel_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""date"": ""str"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1', 'error_reason': ""API 'get_travel_data' requires parameter 'date'.""}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo
        _date: str
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
            <REF>_date</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_travel_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1': ['Missing parameters: date']}}}",1,1,0
task011_missing_api_parameters.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block4.command4', 'error_reason': ""API 'get_diet_plan' requires parameter 'user'.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command4': ['Missing parameters: user']}}}",1,1,0
task012_unhandled_api_return_value.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command10', 'error_reason': ""The function is expected to return a value of type 'str', but no response variable is assigned in this command.""}]","[DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]
            
            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>}]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command10': [""The function returns a value of type 'str', but no response is set in this command.""]}}}",1,1,0
task012_unhandled_api_return_value.json,2,travel_assistant,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
        ""log_transport_information"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command8', 'error_reason': 'The function log_transport_information returns a value of type dict, but no response variable is specified to store this return value. This leads to an unhandled API return value.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _weather_info: dict
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_information WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command8': [""The function returns a value of type 'dict', but no response is set in this command.""]}}}",1,1,0
task012_unhandled_api_return_value.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },      ""submit_user_progress"": {
        ""description"": ""Records the user's workout progress and updates their fitness profile with the completed plan. It returns a status message indicating whether the update was successful."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""plan"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/fitness_implementation.py""
    }
}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block3.command14', 'error_reason': ""The function 'submit_user_progress' returns a value, but no response variable is specified to store this return value.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [CALL submit_user_progress WITH {user: <REF>_user_account_fitness</REF>, plan: <REF>workout_plan</REF>}]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block3.command14': [""The function returns a value of type 'str', but no response is set in this command.""]}}}",1,1,0
task013_unexpected_api_return_handling.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
        ""display_json_data"": {
        ""description"": ""It is used to intelligently convert JSON format information into content that can be directly broadcasted and displayed"",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command10', 'error_reason': 'The function is not designed to return a value, yet a response variable is being assigned.'}]","    [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
            _report_info: str
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_report_info</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL display_json_data WITH {json_data: <REF>json_info</REF>} RESPONSE _report_info: str SET]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]
","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command10': ['The function does not return a value, but a response is set.']}}}",1,1,0
task013_unexpected_api_return_handling.json,2,travel_assistant,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block2.command5', 'error_reason': 'The function log_transport_suggestion does not return any value (returns None), but a response variable _log_result is specified. This leads to unexpected API return handling.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]
    
    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content
    [END_CONSTRAINTS]
    
    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]
    
    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
        _log_result: str
    [END_VARIABLES]
    
    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]
    
        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]
    
        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _weather_info: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_weather_info</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]
    
            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]
    
            [SEQUENTIAL_BLOCK]
                COMMAND-5 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} RESPONSE _log_result: str SET]
                COMMAND-6 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command5': ['The function does not return a value, but a response is set.']}}}",1,1,0
task013_unexpected_api_return_handling.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },     ""log_daily_activity"": {
        ""description"": ""Logs the user's daily workout activity for tracking purposes. It does not return any value."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""plan"": ""dict""
        },
        ""source"": ""data/apis/fitness_implementation.py""
    }
}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.sequential_block2.command10', 'error_reason': 'The function is not designed to return a value, yet a response variable is being assigned.'}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_recommendation</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _recommendation: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _recommendation: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_recommendation</REF>""]
                COMMAND-15 [CALL log_daily_activity WITH {user: <REF>_user_account_fitness</REF>, plan: <REF>workout_plan</REF>} RESPONSE _log_result: str SET]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block3.command15': ['The function does not return a value, but a response is set.']}}}",1,1,0
task014_global_variable_naming_conflict.json,1,daily_news_helper,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{    ""get_movie_data"": {
        ""description"": ""Fetches detailed information about movies from a specified online movie database. It constructs a request using the user's API keys and host details, querying the database for data on the movie 'Inception'."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""get_google_news"": {
        ""description"": ""Obtains the latest news in the business category from Google News, tailored to the user's language and regional settings. The API call includes parameters for language-region and authentication headers."",
        ""paras"": {
            ""user"": ""UserInfo"",
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_game_data"": {
        ""description"": ""Searches for upcoming game releases from the Epic Store based on user-provided search criteria and settings. It filters the results by search words, categories, and user locale settings."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""search_words"": ""str""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py"",
    },
    ""get_finance_data"": {
        ""description"": ""Fetches real-time financial data for specified stock symbols, focusing on the Apple Inc. stock with a period setting of '1D' (one day). The request is authenticated using user-provided API keys."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation2.py""
    },
    ""get_sport_data"": {
        ""description"": ""Provides data on sports events, specifically fetching head-to-head event details for a given event ID using the sport API. The API call is authenticated with user-specific headers."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py"",
    },
    ""transform_json_news"": {
        ""description"": ""Transforms and reports JSON data from news APIs, formatted according to the system's current time and structured as an interaction between an AI butler and its master. It dynamically adapts to include the latest system time in its response."",
        ""paras"": {
            ""json_data"": ""dict""
        },
        ""return"": ""str"",
        ""source"": ""data/apis/implementation.py""
    },}","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders","[{'error_path': 'instruction.main_flow.sequential_block2.command10', 'error_reason': 'A naming conflict has occurred because globally scoped variables with the same names already exist.'}]","   [DEFINE_AGENT: DailyNewsHelper]
        [DEFINE_PERSONA:]
            ROLE: You are a news assistant looking up various current events
            FUNCTION: Call various apis to get JSON messages, and convert JSON data into text information for display.
        [END_PERSONA]

        [DEFINE_CONSTRAINTS:]
            FORBID: It is necessary to filter the query message to avoid the illegal content of bloody violence and pornography and keep the information positive and healthy
        [END_CONSTRAINTS]

        [DEFINE_TYPES:]
            RequestType = [""game"", ""finance"", ""sports"", ""movie"", ""weather"", ""Google News""]
            JsonInfo = { } 
        [END_TYPES]

        [DEFINE_VARIABLES:]
            _user_account1: UserInfo
            _request_type: RequestType
            _search_words: str
            json_info: JsonInfo
        [END_VARIABLES]

        [DEFINE_WORKER: ""Workflow to handle user requests and display news information"" NewsWorkflow]
            [INPUTS]
                <REF>_user_account1</REF>
            [END_INPUTS]

            [OUTPUTS]
                <REF>_user_account1</REF>
            [END_OUTPUTS]

            [MAIN_FLOW]
                [SEQUENTIAL_BLOCK]
                    COMMAND-1 [INPUT ""What type of information do you need? (game, finance, sports, movie, weather, Google News)"" VALUE _request_type: RequestType SET]
                [END_SEQUENTIAL_BLOCK]

                [IF <REF>_request_type</REF> = ""Google News""]
                    COMMAND-2 [CALL get_google_news WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""game""]
                    COMMAND-3 [INPUT ""Please enter the keywords you want to search for."" VALUE _search_words: str SET]
                    COMMAND-4 [CALL get_game_data WITH {user: <REF>_user_account1</REF>, search_words: <REF>_search_words</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""movie""]
                    COMMAND-5 [CALL get_movie_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""finance""]
                    COMMAND-6 [CALL get_finance_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""sports""]
                    COMMAND-7 [CALL get_sport_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [ELSEIF <REF>_request_type</REF> = ""weather""]
                    COMMAND-8 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE json_info: JsonInfo SET]
                [END_IF]

                [SEQUENTIAL_BLOCK]
                    COMMAND-10 [CALL transform_json_news WITH {json_data: <REF>json_info</REF>} RESPONSE _user_account1: str SET]
                    COMMAND-11 [DISPLAY <REF>_user_account1</REF>]
                [END_SEQUENTIAL_BLOCK]
            [END_MAIN_FLOW]
        [END_WORKER]
    [END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block2.command10': ['There is a naming conflict due to the existence of globally scoped variables with identical names.', 'Response variable \'_user_account1\' has problem: In Root has \'string_type\' error for value `{""id"": 10000001, ""password"": ""abc123."", ""language"": ""en"", ""position"": {""longitude_and_latitude"": ""42.6511674, -73.754968"", ""region"": ""US""}, ""key_and_host"": {""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"", ""news_host"": ""google-news13.p.rapidapi.com"", ""game_host"": ""epic-store-games.p.rapidapi.com"", ""weather_host"": ""weatherapi-com.p.rapidapi.com"", ""movie_host"": ""moviedatabase8.p.rapidapi.com"", ""finance_host"": ""real-time-finance-data.p.rapidapi.com"", ""sport_host"": ""sportapi7.p.rapidapi.com""}}` because: Input should be a valid string']}}}",1,1,0
task014_global_variable_naming_conflict.json,2,travel_assistant,"    ""_user_account1"": {
        ""type"": ""UserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000001,
            ""password"": ""abc123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""42.6511674, -73.754968"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""af14234aaemshf737c299e1b18edp1b4068jsn2280b3ea9db6"",
                ""news_host"": ""google-news13.p.rapidapi.com"",
                ""game_host"": ""epic-store-games.p.rapidapi.com"",
                ""weather_host"": ""weatherapi-com.p.rapidapi.com"",
                ""movie_host"": ""moviedatabase8.p.rapidapi.com"",
                ""finance_host"": ""real-time-finance-data.p.rapidapi.com"",
                ""sport_host"": ""sportapi7.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/implementation.py""
    },","{
    ""get_weather_data"": {
        ""description"": ""Retrieves current weather conditions based on the longitude and latitude provided by the user. The request includes headers with the user’s API key and host information for the weather service."",
        ""paras"": {
            ""user"": ""UserInfo""
        },
        ""return"": ""dict"",
        ""source"": ""data/apis/implementation.py""
    },
    ""extract_weather_condition"": {
        ""description"": ""Parses the weather data to extract the current weather condition (e.g., 'Sunny', 'Rainy'). Returns the weather condition as a string matching the WeatherCondition type."",
        ""paras"": {
            ""weather_data"": ""dict""
        },
        ""return"": ""WeatherCondition"",
        ""source"": ""data/apis/implementation.py""
    },
    ""log_transport_suggestion"": {
        ""description"": ""Logs the transport suggestion made to the user for auditing and improvement purposes. Stores the user's ID and the suggested transport mode."",
        ""paras"": {
            ""user"": ""UserInfo"",
            ""mode"": ""TransportMode""
        },
        ""source"": ""data/apis/implementation.py""
    }
}
","class RapidAPIHeaders(TypedDict):
    key: str
    movie_host: str
    game_host: str
    weather_host: str
    sport_host: str
    finance_host: str
    news_host: str


class PositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['UK', 'US', 'RU', 'IN', 'BR', 'DE', 'FR', 'CA']

class UserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: PositionInfo
    key_and_host: RapidAPIHeaders
","[{'error_path': 'instruction.main_flow.sequential_block1.command1', 'error_reason': 'There is a naming conflict due to the use of _user_account1 as a response variable in COMMAND-1, which is also a global variable of type UserInfo. This overwrites the global variable and leads to unexpected behavior.'}]","[DEFINE_AGENT: TravelAssistant]
    [DEFINE_PERSONA:]
        ROLE: You are a travel assistant helping users plan their commute.
        FUNCTION: Provide transportation suggestions based on weather and user preferences.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Please do not generate illegal content.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WeatherCondition = [""Sunny"", ""Rainy"", ""Snowy"", ""Cloudy"", ""Windy""]
        TransportMode = [""Walking"", ""Biking"", ""PublicTransport"", ""Driving"", ""StayHome""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account1: UserInfo  // Global variable
        _current_weather: WeatherCondition
        _transport_mode: TransportMode
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workflow to suggest transportation mode"" TravelWorkflow]
        [INPUTS]
            <REF>_user_account1</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_transport_mode</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [CALL get_weather_data WITH {user: <REF>_user_account1</REF>} RESPONSE _user_account1: dict SET]
                COMMAND-2 [CALL extract_weather_condition WITH {weather_data: <REF>_user_account1</REF>} RESPONSE _current_weather: WeatherCondition SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_current_weather</REF> = ""Sunny""]
                COMMAND-3 [COMMAND Set the value of _transport_mode to ""Walking"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Rainy""]
                COMMAND-4 [COMMAND Set the value of _transport_mode to ""PublicTransport"" RESULT _transport_mode: TransportMode SET]
            [ELSEIF <REF>_current_weather</REF> = ""Snowy""]
                COMMAND-5 [COMMAND Set the value of _transport_mode to ""StayHome"" RESULT _transport_mode: TransportMode SET]
            [ELSE]
                COMMAND-6 [COMMAND Set the value of _transport_mode to ""Driving"" RESULT _transport_mode: TransportMode SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-7 [DISPLAY ""Based on the current weather, we suggest: "" <REF>_transport_mode</REF>]
                COMMAND-8 [CALL log_transport_suggestion WITH {user: <REF>_user_account1</REF>, mode: <REF>_transport_mode</REF>} ]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.sequential_block1.command1': ['There is a naming conflict due to the existence of globally scoped variables with identical names.']}}}",1,1,0
task014_global_variable_naming_conflict.json,3,fitness_health_advisor,"{    ""_user_account_fitness"": {
        ""type"": ""FitnessUserInfo"",
        ""is_global"": True,
        ""value"": {
            ""id"": 10000004,
            ""password"": ""Fitness123."",
            ""language"": ""en"",
            ""position"": {
                ""longitude_and_latitude"": ""34.052235, -118.243683"",
                ""region"": ""US""
            },
            ""key_and_host"": {
                ""key"": ""4a1e23dd4a2b340b87123ef1234ab123"",
                ""fitness_host"": ""fitness-api.p.rapidapi.com"",
                ""diet_host"": ""diet-api.p.rapidapi.com""
            }
        },
        ""source"": ""data/vars/fitness_implementation.py""
    }}"," {   ""get_workout_plan"": {
        ""description"": ""Fetches a workout plan based on the user's selected workout type, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""type"": ""WorkoutType""
        },
        ""return"": ""WorkoutPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    },
    ""get_diet_plan"": {
        ""description"": ""Fetches a diet plan tailored to the user's dietary preferences, using the user's API keys and preferences."",
        ""paras"": {
            ""user"": ""FitnessUserInfo"",
            ""preference"": ""str""
        },
        ""return"": ""DietPlan"",
        ""source"": ""data/apis/fitness_implementation.py""
    }}","class FitnessAPIHeaders(TypedDict):
    key: str
    fitness_host: str
    diet_host: str


class FitnessPositionInfo(TypedDict):
    longitude_and_latitude: str
    region: Literal['US', 'CA', 'AU', 'UK', 'IN']


class FitnessUserInfo(TypedDict):
    id: int
    language: str
    password: str
    position: FitnessPositionInfo
    key_and_host: FitnessAPIHeaders


class DietPlan(TypedDict):
    meals: List[str]
    total_calories: int


WorkoutType = Literal[""strength"", ""cardio"", ""flexibility"", ""balance""]


class WorkoutPlan(TypedDict):
    exercises: List[str]
    duration_in_minutes: int
    intensity: str","[{'error_path': 'instruction.main_flow.if_block.command13', 'error_reason': ""The global variable '_user_account_fitness' is used as a response variable, which leads to a naming conflict and potential overwriting of the global variable.""}]","[DEFINE_AGENT: FitnessHealthAdvisor]
    [DEFINE_PERSONA:]
        ROLE: You are a fitness and health assistant providing workout routines and diet plans based on user input.
    [END_PERSONA]

    [DEFINE_CONSTRAINTS:]
        FORBID: Share only safe and verified health tips, avoid any content that could harm the user.
    [END_CONSTRAINTS]

    [DEFINE_TYPES:]
        WorkoutType = [""strength"", ""cardio"", ""flexibility"", ""balance""]
        DietPlan = { meals: List[str], total_calories: int }
        WorkoutPlan = { exercises: List[str], duration_in_minutes: int, intensity: str }
        FeedbackResponse = [""great"", ""average"", ""poor""]
    [END_TYPES]

    [DEFINE_VARIABLES:]
        _user_account_fitness: FitnessUserInfo
        _chosen_workout_type: WorkoutType
        _diet_preference: str
        workout_plan: WorkoutPlan
        diet_plan: DietPlan
        feedback: FeedbackResponse
        _recommendation: str
    [END_VARIABLES]

    [DEFINE_WORKER: ""Workout and Diet Planning"" FitnessRoutineWorkflow]
        [INPUTS]
            <REF>_user_account_fitness</REF>
        [END_INPUTS]

        [OUTPUTS]
            <REF>_user_account_fitness</REF>
        [END_OUTPUTS]

        [MAIN_FLOW]
            [SEQUENTIAL_BLOCK]
                COMMAND-1 [INPUT ""What type of workout would you like to focus on? (strength, cardio, flexibility, balance)"" VALUE _chosen_workout_type: WorkoutType SET]
                COMMAND-2 [CALL get_workout_plan WITH {user: <REF>_user_account_fitness</REF>, type: <REF>_chosen_workout_type</REF>} RESPONSE workout_plan: WorkoutPlan SET]
                COMMAND-3 [INPUT ""Do you have any dietary preferences? (e.g., vegetarian, low-carb, high-protein)"" VALUE _diet_preference: str SET]
                COMMAND-4 [CALL get_diet_plan WITH {user: <REF>_user_account_fitness</REF>, preference: <REF>_diet_preference</REF>} RESPONSE diet_plan: DietPlan SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>_chosen_workout_type</REF> = ""strength""]
                COMMAND-5 [DISPLAY ""Your strength training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""cardio""]
                COMMAND-6 [DISPLAY ""Your cardio workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""flexibility""]
                COMMAND-7 [DISPLAY ""Your flexibility training workout plan includes: <REF>workout_plan</REF>""]
            [ELSEIF <REF>_chosen_workout_type</REF> = ""balance""]
                COMMAND-8 [DISPLAY ""Your balance training workout plan includes: <REF>workout_plan</REF>""]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-9 [DISPLAY ""Your diet plan is: <REF>diet_plan</REF>""]
                COMMAND-10 [INPUT ""How would you rate today's fitness plan? (great, average, poor)"" VALUE feedback: FeedbackResponse SET]
            [END_SEQUENTIAL_BLOCK]

            [IF <REF>feedback</REF> = ""great""]
                COMMAND-11 [COMMAND Set the value of _recommendation to ""You did an excellent job today! Keep it up!"" RESULT _user_account_fitness: str SET]
            [ELSEIF <REF>feedback</REF> = ""average""]
                COMMAND-12 [COMMAND Set the value of _recommendation to ""You did well, but there's room for improvement!"" RESULT _user_account_fitness: str SET]
            [ELSEIF <REF>feedback</REF> = ""poor""]
                COMMAND-13 [COMMAND Set the value of _recommendation to ""Don't be discouraged. Tomorrow is another chance!"" RESULT _user_account_fitness: str SET]
            [END_IF]

            [SEQUENTIAL_BLOCK]
                COMMAND-14 [DISPLAY ""Today's feedback: <REF>_user_account_fitness</REF>""]
            [END_SEQUENTIAL_BLOCK]
        [END_MAIN_FLOW]
    [END_WORKER]
[END_AGENT]","{'persona_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'constraints_errors': {'syntax_errors': {}, 'semantic_errors': {}}, 'instruction_errors': {'syntax_errors': {}, 'semantic_errors': {'instruction.main_flow.if_block2.if_part.command11': ['There is a naming conflict due to the existence of globally scoped variables with identical names.'], 'instruction.main_flow.if_block2.elif_part1.command12': ['There is a naming conflict due to the existence of globally scoped variables with identical names.'], 'instruction.main_flow.if_block2.elif_part2.command13': ['There is a naming conflict due to the existence of globally scoped variables with identical names.']}}}",1,1,0
